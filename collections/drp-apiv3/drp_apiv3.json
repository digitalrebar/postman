{
	"info": {
		"_postman_id": "880b8d29-9334-4be7-a495-3d1dda3a4724",
		"name": "DRP APIv3 Specifications - Endpoint v4.2.4",
		"description": "Digital Rebar Platvorm API v3 - Release v4.2.4 Specification\n------------------------------------------------------------\n\nThe complete Digital Rebar Platfrom (DRP) API v3 specification.  This is generated by importing the swagger.json generated information from a DRP Endpoint.\n\n**WARNING** Please note that the swagger.json is itself dynamically generated from each Release version of DRP.  To ensure you are reviewing the most recent or correct value, you should generate this yourself by importing the swagger.json spec.\n\nThis is provided as a reference of the full API implementation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "bootenvs",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a bootenv BootEnv",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootenvs",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a BootEnv specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootenvs",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bootenvs/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bootenvs",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List bootenv actions BootEnv",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List BootEnv actions for a BootEnv specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bootenvs/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootenvs",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bootenvs/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootenvs",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bootenvs/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootenvs",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bootenvs/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootenvs",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a BootEnv",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bootenvs/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a BootEnv specified by {name}"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "BootEnvResponse returned on a successful GET, PUT, PATCH, or POST of a single bootenv",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"Kernel\": \"<string>\",\n \"Initrds\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootParams\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OnlyUnknown\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": {\n  \"Name\": \"<string>\",\n  \"Codename\": \"<string>\",\n  \"Family\": \"<string>\",\n  \"IsoFile\": \"<string>\",\n  \"IsoSha256\": \"<string>\",\n  \"IsoUrl\": \"<uri>\",\n  \"SupportedArchitectures\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a BootEnv",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bootenvs/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the BootEnv specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "BootEnvResponse returned on a successful GET, PUT, PATCH, or POST of a single bootenv",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"Kernel\": \"<string>\",\n \"Initrds\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootParams\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OnlyUnknown\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": {\n  \"Name\": \"<string>\",\n  \"Codename\": \"<string>\",\n  \"Family\": \"<string>\",\n  \"IsoFile\": \"<string>\",\n  \"IsoSha256\": \"<string>\",\n  \"IsoUrl\": \"<uri>\",\n  \"SupportedArchitectures\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a BootEnv exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bootenvs/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the BootEnv specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a BootEnv",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/bootenvs/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a BootEnv specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "BootEnvResponse returned on a successful GET, PUT, PATCH, or POST of a single bootenv",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"Kernel\": \"<string>\",\n \"Initrds\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootParams\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OnlyUnknown\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": {\n  \"Name\": \"<string>\",\n  \"Codename\": \"<string>\",\n  \"Family\": \"<string>\",\n  \"IsoFile\": \"<string>\",\n  \"IsoSha256\": \"<string>\",\n  \"IsoUrl\": \"<uri>\",\n  \"SupportedArchitectures\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a BootEnv",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Templates\": [\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        },\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        }\n    ],\n    \"Kernel\": \"<string>\",\n    \"Initrds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"BootParams\": \"<string>\",\n    \"RequiredParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"OnlyUnknown\": \"<boolean>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"OS\": {\n        \"Name\": \"<string>\",\n        \"Codename\": \"<string>\",\n        \"Family\": \"<string>\",\n        \"IsoFile\": \"<string>\",\n        \"IsoSha256\": \"<string>\",\n        \"IsoUrl\": \"<uri>\",\n        \"SupportedArchitectures\": \"<object>\",\n        \"Version\": \"<string>\"\n    },\n    \"OptionalParams\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bootenvs/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a BootEnv specified by {name} using a JSON BootEnv"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "BootEnvResponse returned on a successful GET, PUT, PATCH, or POST of a single bootenv",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootenvs/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootenvs",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"Kernel\": \"<string>\",\n \"Initrds\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootParams\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OnlyUnknown\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": {\n  \"Name\": \"<string>\",\n  \"Codename\": \"<string>\",\n  \"Family\": \"<string>\",\n  \"IsoFile\": \"<string>\",\n  \"IsoSha256\": \"<string>\",\n  \"IsoUrl\": \"<uri>\",\n  \"SupportedArchitectures\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists BootEnvs filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bootenvs"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "OnlyUnknown",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all BootEnvs by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nOnlyUnknown = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "BootEnvsResponse returned on a successful GET of all the bootenvs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Templates\": [\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   },\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   }\n  ],\n  \"Kernel\": \"<string>\",\n  \"Initrds\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"BootParams\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OnlyUnknown\": \"<boolean>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OS\": {\n   \"Name\": \"<string>\",\n   \"Codename\": \"<string>\",\n   \"Family\": \"<string>\",\n   \"IsoFile\": \"<string>\",\n   \"IsoSha256\": \"<string>\",\n   \"IsoUrl\": \"<uri>\",\n   \"SupportedArchitectures\": \"<object>\",\n   \"Version\": \"<string>\"\n  },\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Templates\": [\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   },\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   }\n  ],\n  \"Kernel\": \"<string>\",\n  \"Initrds\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"BootParams\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OnlyUnknown\": \"<boolean>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OS\": {\n   \"Name\": \"<string>\",\n   \"Codename\": \"<string>\",\n   \"Family\": \"<string>\",\n   \"IsoFile\": \"<string>\",\n   \"IsoSha256\": \"<string>\",\n   \"IsoUrl\": \"<uri>\",\n   \"SupportedArchitectures\": \"<object>\",\n   \"Version\": \"<string>\"\n  },\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List BootEnvs filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bootenvs"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "OnlyUnknown",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nOnlyUnknown = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&OnlyUnknown=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "OnlyUnknown",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a BootEnv",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Templates\": [\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        },\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        }\n    ],\n    \"Kernel\": \"<string>\",\n    \"Initrds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"BootParams\": \"<string>\",\n    \"RequiredParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"OnlyUnknown\": \"<boolean>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"OS\": {\n        \"Name\": \"<string>\",\n        \"Codename\": \"<string>\",\n        \"Family\": \"<string>\",\n        \"IsoFile\": \"<string>\",\n        \"IsoSha256\": \"<string>\",\n        \"IsoUrl\": \"<uri>\",\n        \"SupportedArchitectures\": \"<object>\",\n        \"Version\": \"<string>\"\n    },\n    \"OptionalParams\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bootenvs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bootenvs"
							]
						},
						"description": "Create a BootEnv from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "BootEnvResponse returned on a successful GET, PUT, PATCH, or POST of a single bootenv",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"Kernel\": \"<string>\",\n \"Initrds\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootParams\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OnlyUnknown\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": {\n  \"Name\": \"<string>\",\n  \"Codename\": \"<string>\",\n  \"Family\": \"<string>\",\n  \"IsoFile\": \"<string>\",\n  \"IsoSha256\": \"<string>\",\n  \"IsoUrl\": \"<uri>\",\n  \"SupportedArchitectures\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootenvs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootenvs"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "contents",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "Delete a content set.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contents/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								}
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a specific content with {name}",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contents/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get a specific content specified by {name}."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ContentResponse returned on a successful GET of a contents",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"CodeSource\": \"<string>\",\n  \"Color\": \"<string>\",\n  \"Copyright\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"DisplayName\": \"<string>\",\n  \"DocUrl\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Icon\": \"<string>\",\n  \"License\": \"<string>\",\n  \"Order\": \"<string>\",\n  \"Overwritable\": \"<boolean>\",\n  \"Prerequisites\": \"<string>\",\n  \"RequiredFeatures\": \"<string>\",\n  \"Source\": \"<string>\",\n  \"Tags\": \"<string>\",\n  \"Type\": \"<string>\",\n  \"Version\": \"<string>\",\n  \"Writable\": \"<boolean>\"\n },\n \"sections\": \"<object>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "upload Content",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"meta\": {\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"CodeSource\": \"<string>\",\n        \"Color\": \"<string>\",\n        \"Copyright\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"DisplayName\": \"<string>\",\n        \"DocUrl\": \"<string>\",\n        \"Documentation\": \"<string>\",\n        \"Icon\": \"<string>\",\n        \"License\": \"<string>\",\n        \"Order\": \"<string>\",\n        \"Overwritable\": \"<boolean>\",\n        \"Prerequisites\": \"<string>\",\n        \"RequiredFeatures\": \"<string>\",\n        \"Source\": \"<string>\",\n        \"Tags\": \"<string>\",\n        \"Type\": \"<string>\",\n        \"Version\": \"<string>\",\n        \"Writable\": \"<boolean>\"\n    },\n    \"sections\": \"<object>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/contents/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Replace content in Digital Rebar Provision"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ContentSummaryResponse returned on a successful Post of a content",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Counts\": \"<object>\",\n \"Warnings\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"meta\": {\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"CodeSource\": \"<string>\",\n  \"Color\": \"<string>\",\n  \"Copyright\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"DisplayName\": \"<string>\",\n  \"DocUrl\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Icon\": \"<string>\",\n  \"License\": \"<string>\",\n  \"Order\": \"<string>\",\n  \"Overwritable\": \"<boolean>\",\n  \"Prerequisites\": \"<string>\",\n  \"RequiredFeatures\": \"<string>\",\n  \"Source\": \"<string>\",\n  \"Tags\": \"<string>\",\n  \"Type\": \"<string>\",\n  \"Version\": \"<string>\",\n  \"Writable\": \"<boolean>\"\n }\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Insufficient Storage (WebDAV) (RFC 4918)",
									"code": 507,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contents/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contents",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "list Contents",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contents"
							]
						},
						"description": "Lists possible contents on the system to serve DHCP"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ContentsResponse returned on a successful GET of all contents",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Counts\": \"<object>\",\n  \"Warnings\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"meta\": {\n   \"Name\": \"<string>\",\n   \"Author\": \"<string>\",\n   \"CodeSource\": \"<string>\",\n   \"Color\": \"<string>\",\n   \"Copyright\": \"<string>\",\n   \"Description\": \"<string>\",\n   \"DisplayName\": \"<string>\",\n   \"DocUrl\": \"<string>\",\n   \"Documentation\": \"<string>\",\n   \"Icon\": \"<string>\",\n   \"License\": \"<string>\",\n   \"Order\": \"<string>\",\n   \"Overwritable\": \"<boolean>\",\n   \"Prerequisites\": \"<string>\",\n   \"RequiredFeatures\": \"<string>\",\n   \"Source\": \"<string>\",\n   \"Tags\": \"<string>\",\n   \"Type\": \"<string>\",\n   \"Version\": \"<string>\",\n   \"Writable\": \"<boolean>\"\n  }\n },\n {\n  \"Counts\": \"<object>\",\n  \"Warnings\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"meta\": {\n   \"Name\": \"<string>\",\n   \"Author\": \"<string>\",\n   \"CodeSource\": \"<string>\",\n   \"Color\": \"<string>\",\n   \"Copyright\": \"<string>\",\n   \"Description\": \"<string>\",\n   \"DisplayName\": \"<string>\",\n   \"DocUrl\": \"<string>\",\n   \"Documentation\": \"<string>\",\n   \"Icon\": \"<string>\",\n   \"License\": \"<string>\",\n   \"Order\": \"<string>\",\n   \"Overwritable\": \"<boolean>\",\n   \"Prerequisites\": \"<string>\",\n   \"RequiredFeatures\": \"<string>\",\n   \"Source\": \"<string>\",\n   \"Tags\": \"<string>\",\n   \"Type\": \"<string>\",\n   \"Version\": \"<string>\",\n   \"Writable\": \"<boolean>\"\n  }\n }\n]"
						}
					]
				},
				{
					"name": "create Content",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"meta\": {\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"CodeSource\": \"<string>\",\n        \"Color\": \"<string>\",\n        \"Copyright\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"DisplayName\": \"<string>\",\n        \"DocUrl\": \"<string>\",\n        \"Documentation\": \"<string>\",\n        \"Icon\": \"<string>\",\n        \"License\": \"<string>\",\n        \"Order\": \"<string>\",\n        \"Overwritable\": \"<boolean>\",\n        \"Prerequisites\": \"<string>\",\n        \"RequiredFeatures\": \"<string>\",\n        \"Source\": \"<string>\",\n        \"Tags\": \"<string>\",\n        \"Type\": \"<string>\",\n        \"Version\": \"<string>\",\n        \"Writable\": \"<boolean>\"\n    },\n    \"sections\": \"<object>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/contents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contents"
							]
						},
						"description": "Create content into Digital Rebar Provision"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Insufficient Storage (WebDAV) (RFC 4918)",
							"code": 507,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ContentSummaryResponse returned on a successful Post of a content",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Counts\": \"<object>\",\n \"Warnings\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"meta\": {\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"CodeSource\": \"<string>\",\n  \"Color\": \"<string>\",\n  \"Copyright\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"DisplayName\": \"<string>\",\n  \"DocUrl\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Icon\": \"<string>\",\n  \"License\": \"<string>\",\n  \"Order\": \"<string>\",\n  \"Overwritable\": \"<boolean>\",\n  \"Prerequisites\": \"<string>\",\n  \"RequiredFeatures\": \"<string>\",\n  \"Source\": \"<string>\",\n  \"Tags\": \"<string>\",\n  \"Type\": \"<string>\",\n  \"Version\": \"<string>\",\n  \"Writable\": \"<boolean>\"\n }\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contents"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "contexts",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a context Context",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"contexts",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Context specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"contexts",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/contexts/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"contexts",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List context actions Context",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Context actions for a Context specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/contexts/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"contexts",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/contexts/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"contexts",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Context",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contexts/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Context specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ContextResponse returned on a successful GET, PUT, PATCH, or POST of a single context",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Engine\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Image\": \"<string>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Context",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contexts/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Context specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "ContextResponse returned on a successful GET, PUT, PATCH, or POST of a single context",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Engine\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Image\": \"<string>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Context exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contexts/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Context specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Context",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/contexts/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Context specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ContextResponse returned on a successful GET, PUT, PATCH, or POST of a single context",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Engine\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Image\": \"<string>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Context",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Engine\": \"<string>\",\n    \"Image\": \"<string>\",\n    \"Name\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/contexts/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Context specified by {name} using a JSON Context"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ContextResponse returned on a successful GET, PUT, PATCH, or POST of a single context",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/contexts/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"contexts",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Engine\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Image\": \"<string>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Contexts filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contexts"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Reboot",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Contexts by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ContextsResponse returned on a successful GET of all the contexts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Engine\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Image\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Engine\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Image\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Contexts filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contexts"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Reboot",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Context",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Engine\": \"<string>\",\n    \"Image\": \"<string>\",\n    \"Name\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/contexts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contexts"
							]
						},
						"description": "Create a Context from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ContextResponse returned on a successful GET, PUT, PATCH, or POST of a single context",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Engine\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Image\": \"<string>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contexts"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "files",
			"item": [
				{
					"name": "{path}",
					"item": [
						{
							"name": "Delete a file to a specific {path} in the tree under files.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files/:path?explode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files",
										":path"
									],
									"query": [
										{
											"key": "explode",
											"value": "<string>",
											"description": "in: explode"
										}
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "The file will be removed from the {path} in /files."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a specific File with {path}",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files/:path?explode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files",
										":path"
									],
									"query": [
										{
											"key": "explode",
											"value": "<string>",
											"description": "in: explode"
										}
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get a specific file specified by {path} under files."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nFileResponse returned on a successful GET of a file",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<binary>\""
								}
							]
						},
						{
							"name": "See if a file exists and return a checksum in the header",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files/:path?explode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files",
										":path"
									],
									"query": [
										{
											"key": "explode",
											"value": "<string>",
											"description": "in: explode"
										}
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the file specified by {path} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Upload a file to a specific {path} in the tree under files.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/files/:path?explode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files",
										":path"
									],
									"query": [
										{
											"key": "explode",
											"value": "<string>",
											"description": "in: explode"
										}
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "The file will be uploaded to the {path} in /files.  The {path} will be created."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "FileInfoResponse returned on a successful upload of a file",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Path\": \"<string>\",\n \"Size\": \"<long>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Insufficient Storage (WebDAV) (RFC 4918)",
									"code": 507,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/:path?explode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												":path"
											],
											"query": [
												{
													"key": "explode",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists files in files directory or subdirectory per query parameter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/files?path=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files"
							],
							"query": [
								{
									"key": "path",
									"value": "<string>"
								}
							]
						},
						"description": "Lists the files in a directory under /files.  path=<path to return>\nPath defaults to /"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/files?path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files"
									],
									"query": [
										{
											"key": "path",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "FilesResponse returned on a successful GET of files",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/files?path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files"
									],
									"query": [
										{
											"key": "path",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n \"<string>\",\n \"<string>\"\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/files?path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files"
									],
									"query": [
										{
											"key": "path",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/files?path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files"
									],
									"query": [
										{
											"key": "path",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "indexes",
			"item": [
				{
					"name": "{prefix}",
					"item": [
						{
							"name": "get Index",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indexes/:prefix",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indexes",
										":prefix"
									],
									"variable": [
										{
											"key": "prefix",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get static indexes for a specific object type"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix"
											],
											"variable": [
												{
													"key": "prefix"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix"
											],
											"variable": [
												{
													"key": "prefix"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix"
											],
											"variable": [
												{
													"key": "prefix"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "IndexResponse lists all of the static indexes for a specific type of object",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix"
											],
											"variable": [
												{
													"key": "prefix"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<object>\""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix"
											],
											"variable": [
												{
													"key": "prefix"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get information on a specific index for a specific object type.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indexes/:prefix/:param",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indexes",
										":prefix",
										":param"
									],
									"variable": [
										{
											"key": "prefix",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										},
										{
											"key": "param",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Unlike the other routes, you can probe for parameter-defined\nindexes using this route."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix/:param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix",
												":param"
											],
											"variable": [
												{
													"key": "prefix"
												},
												{
													"key": "param"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix/:param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix",
												":param"
											],
											"variable": [
												{
													"key": "prefix"
												},
												{
													"key": "param"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "IndexResponse lists all of the static indexes for a specific type of object",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix/:param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix",
												":param"
											],
											"variable": [
												{
													"key": "prefix"
												},
												{
													"key": "param"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<object>\""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix/:param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix",
												":param"
											],
											"variable": [
												{
													"key": "prefix"
												},
												{
													"key": "param"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/indexes/:prefix/:param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indexes",
												":prefix",
												":param"
											],
											"variable": [
												{
													"key": "prefix"
												},
												{
													"key": "param"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "list Indexes",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/indexes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indexes"
							]
						},
						"description": "List all static indexes for objects"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/indexes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indexes"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/indexes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indexes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/indexes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indexes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "IndexesResponse lists all the static indexes for all the object types",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/indexes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indexes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "interfaces",
			"item": [
				{
					"name": "list Interfaces",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/interfaces",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"interfaces"
							]
						},
						"description": "Lists possible interfaces on the system to serve DHCP"
					},
					"response": [
						{
							"name": "InterfacesResponse returned on a successful GET of all interfaces",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Addresses\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ActiveAddress\": \"<string>\",\n  \"DnsDomain\": \"<string>\",\n  \"DnsServers\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Gateway\": \"<string>\",\n  \"Index\": \"<long>\",\n  \"ReadOnly\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Addresses\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ActiveAddress\": \"<string>\",\n  \"DnsDomain\": \"<string>\",\n  \"DnsServers\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Gateway\": \"<string>\",\n  \"Index\": \"<long>\",\n  \"ReadOnly\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get a specific interface with {name}",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/interfaces/:name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"interfaces",
								":name"
							],
							"variable": [
								{
									"key": "name",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							]
						},
						"description": "Get a specific interface specified by {name}."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "InterfacesResponse returned on a successful GET of an interfaces",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Addresses\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ActiveAddress\": \"<string>\",\n \"DnsDomain\": \"<string>\",\n \"DnsServers\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Gateway\": \"<string>\",\n \"Index\": \"<long>\",\n \"ReadOnly\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/interfaces/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interfaces",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "isos",
			"item": [
				{
					"name": "{path}",
					"item": [
						{
							"name": "Delete an iso to a specific {path} in the tree under isos.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/isos/:path",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos",
										":path"
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "The iso will be removed from the {path} in /isos."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a specific Iso with {path}",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/isos/:path",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos",
										":path"
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get a specific iso specified by {path} under isos."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nIsoResponse returned on a successful GET of an iso",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<object>\""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a iso exists and return a checksum in the header",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/isos/:path",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos",
										":path"
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the iso specified by {path} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Upload an iso to a specific {path} in the tree under isos.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/isos/:path",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos",
										":path"
									],
									"variable": [
										{
											"key": "path",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "The iso will be uploaded to the {path} in /isos.  The {path} will be created."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "IsoInfoResponse returned on a successful upload of an iso",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Path\": \"<string>\",\n \"Size\": \"<long>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Insufficient Storage (WebDAV) (RFC 4918)",
									"code": 507,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isos/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isos",
												":path"
											],
											"variable": [
												{
													"key": "path"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists isos in isos directory",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/isos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"isos"
							]
						},
						"description": "Lists the isos in a directory under /isos."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "IsosResponse returned on a successful GET of isos",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n \"<string>\",\n \"<string>\"\n]"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isos"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "jobs",
			"item": [
				{
					"name": "{uuid}",
					"item": [
						{
							"name": "log",
							"item": [
								{
									"name": "Get the log for this job",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid/log",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid",
												"log"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Get log for the Job specified by {uuid} or return NotFound."
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nJobLogResponse returned on a successful GET of a log",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<binary>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get the log for this job",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "HEAD",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid/log",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid",
												"log"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Get log for the Job specified by {uuid} or return NotFound."
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nJobLogResponse returned on a successful GET of a log",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<binary>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Append the string to the end of the job's log.",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid/log",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid",
												"log"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										}
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/log",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"log"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "plugin actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a job Job",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"plugin_actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Job specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"plugin_actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"jobs",
																":uuid",
																"plugin_actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List job plugin_actions Job",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions?plugin=<string>&os=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid",
												"plugin_actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												},
												{
													"key": "os",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Job plugin_actions for a Job specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions?plugin=<string>&os=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"plugin_actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														},
														{
															"key": "os",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/jobs/:uuid/plugin_actions?plugin=<string>&os=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"jobs",
														":uuid",
														"plugin_actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														},
														{
															"key": "os",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Job",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/jobs/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Job specified by {uuid}"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Uuid\": \"<uuid>\",\n \"Machine\": \"<uuid>\",\n \"State\": \"<string>\",\n \"Archived\": \"<boolean>\",\n \"Current\": \"<boolean>\",\n \"CurrentIndex\": \"<long>\",\n \"NextIndex\": \"<long>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"EndTime\": \"<dateTime>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExitState\": \"<string>\",\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Previous\": \"<uuid>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stage\": \"<string>\",\n \"StartTime\": \"<dateTime>\",\n \"Task\": \"<string>\",\n \"Token\": \"<string>\",\n \"Validated\": \"<boolean>\",\n \"Workflow\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Job",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/jobs/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Job specified by {uuid} or return NotFound."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Uuid\": \"<uuid>\",\n \"Machine\": \"<uuid>\",\n \"State\": \"<string>\",\n \"Archived\": \"<boolean>\",\n \"Current\": \"<boolean>\",\n \"CurrentIndex\": \"<long>\",\n \"NextIndex\": \"<long>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"EndTime\": \"<dateTime>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExitState\": \"<string>\",\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Previous\": \"<uuid>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stage\": \"<string>\",\n \"StartTime\": \"<dateTime>\",\n \"Task\": \"<string>\",\n \"Token\": \"<string>\",\n \"Validated\": \"<boolean>\",\n \"Workflow\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a Job exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/jobs/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Job specifiec by {uuid} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Job",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Job specified by {uuid} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Uuid\": \"<uuid>\",\n \"Machine\": \"<uuid>\",\n \"State\": \"<string>\",\n \"Archived\": \"<boolean>\",\n \"Current\": \"<boolean>\",\n \"CurrentIndex\": \"<long>\",\n \"NextIndex\": \"<long>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"EndTime\": \"<dateTime>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExitState\": \"<string>\",\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Previous\": \"<uuid>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stage\": \"<string>\",\n \"StartTime\": \"<dateTime>\",\n \"Task\": \"<string>\",\n \"Token\": \"<string>\",\n \"Validated\": \"<boolean>\",\n \"Workflow\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Job",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Uuid\": \"<uuid>\",\n    \"Machine\": \"<uuid>\",\n    \"State\": \"<string>\",\n    \"Archived\": \"<boolean>\",\n    \"Current\": \"<boolean>\",\n    \"Context\": \"<string>\",\n    \"EndTime\": \"<dateTime>\",\n    \"ExitState\": \"<string>\",\n    \"ExtraClaims\": [\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        },\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        }\n    ],\n    \"Previous\": \"<uuid>\",\n    \"StartTime\": \"<dateTime>\",\n    \"Token\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Job specified by {uuid} using a JSON Job"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Uuid\": \"<uuid>\",\n \"Machine\": \"<uuid>\",\n \"State\": \"<string>\",\n \"Archived\": \"<boolean>\",\n \"Current\": \"<boolean>\",\n \"CurrentIndex\": \"<long>\",\n \"NextIndex\": \"<long>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"EndTime\": \"<dateTime>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExitState\": \"<string>\",\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Previous\": \"<uuid>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stage\": \"<string>\",\n \"StartTime\": \"<dateTime>\",\n \"Task\": \"<string>\",\n \"Token\": \"<string>\",\n \"Validated\": \"<boolean>\",\n \"Workflow\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "List job plugin_actions Job",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/jobs/:uuid/actions?plugin=<string>&os=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":uuid",
										"actions"
									],
									"query": [
										{
											"key": "plugin",
											"value": "<string>"
										},
										{
											"key": "os",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "List Job plugin_actions for a Job specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
							},
							"response": [
								{
									"name": "ActionsResponse return on a successful GET of all Actions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid/actions?plugin=<string>&os=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												},
												{
													"key": "os",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/jobs/:uuid/actions?plugin=<string>&os=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"jobs",
												":uuid",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												},
												{
													"key": "os",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Jobs filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Uuid",
									"value": "<string>"
								},
								{
									"key": "Stage",
									"value": "<string>"
								},
								{
									"key": "Task",
									"value": "<string>"
								},
								{
									"key": "State",
									"value": "<string>"
								},
								{
									"key": "Machine",
									"value": "<string>"
								},
								{
									"key": "Archived",
									"value": "<string>"
								},
								{
									"key": "StartTime",
									"value": "<string>"
								},
								{
									"key": "EndTime",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Jobs by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = string\nStage = string\nTask = string\nState = string\nMachine = string\nArchived = boolean\nStartTime = datetime\nEndTime = datetime\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nUuid=fred - returns items named fred\nUuid=Lt(fred) - returns items that alphabetically less than fred.\nUuid=Lt(fred)&Archived=true - returns items with Uuid less than fred and Archived is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "JobsResponse return on a successful GET of all Jobs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Uuid\": \"<uuid>\",\n  \"Machine\": \"<uuid>\",\n  \"State\": \"<string>\",\n  \"Archived\": \"<boolean>\",\n  \"Current\": \"<boolean>\",\n  \"CurrentIndex\": \"<long>\",\n  \"NextIndex\": \"<long>\",\n  \"Available\": \"<boolean>\",\n  \"BootEnv\": \"<string>\",\n  \"Bundle\": \"<string>\",\n  \"Context\": \"<string>\",\n  \"EndTime\": \"<dateTime>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ExitState\": \"<string>\",\n  \"ExtraClaims\": [\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   },\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   }\n  ],\n  \"Previous\": \"<uuid>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Stage\": \"<string>\",\n  \"StartTime\": \"<dateTime>\",\n  \"Task\": \"<string>\",\n  \"Token\": \"<string>\",\n  \"Validated\": \"<boolean>\",\n  \"Workflow\": \"<string>\"\n },\n {\n  \"Uuid\": \"<uuid>\",\n  \"Machine\": \"<uuid>\",\n  \"State\": \"<string>\",\n  \"Archived\": \"<boolean>\",\n  \"Current\": \"<boolean>\",\n  \"CurrentIndex\": \"<long>\",\n  \"NextIndex\": \"<long>\",\n  \"Available\": \"<boolean>\",\n  \"BootEnv\": \"<string>\",\n  \"Bundle\": \"<string>\",\n  \"Context\": \"<string>\",\n  \"EndTime\": \"<dateTime>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ExitState\": \"<string>\",\n  \"ExtraClaims\": [\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   },\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   }\n  ],\n  \"Previous\": \"<uuid>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Stage\": \"<string>\",\n  \"StartTime\": \"<dateTime>\",\n  \"Task\": \"<string>\",\n  \"Token\": \"<string>\",\n  \"Validated\": \"<boolean>\",\n  \"Workflow\": \"<string>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Stats of the List Jobs filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Uuid",
									"value": "<string>"
								},
								{
									"key": "Stage",
									"value": "<string>"
								},
								{
									"key": "Task",
									"value": "<string>"
								},
								{
									"key": "State",
									"value": "<string>"
								},
								{
									"key": "Machine",
									"value": "<string>"
								},
								{
									"key": "Archived",
									"value": "<string>"
								},
								{
									"key": "StartTime",
									"value": "<string>"
								},
								{
									"key": "EndTime",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = string\nStage = string\nTask = string\nState = string\nMachine = string\nArchived = boolean\nStartTime = datetime\nEndTime = datetime\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nUuid=fred - returns items named fred\nUuid=Lt(fred) - returns items that alphabetically less than fred.\nUuid=Lt(fred)&Archived=true - returns items with Uuid less than fred and Archived is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Stage=<string>&Task=<string>&State=<string>&Machine=<string>&Archived=<string>&StartTime=<string>&EndTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Stage",
											"value": "<string>"
										},
										{
											"key": "Task",
											"value": "<string>"
										},
										{
											"key": "State",
											"value": "<string>"
										},
										{
											"key": "Machine",
											"value": "<string>"
										},
										{
											"key": "Archived",
											"value": "<string>"
										},
										{
											"key": "StartTime",
											"value": "<string>"
										},
										{
											"key": "EndTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Job",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Uuid\": \"<uuid>\",\n    \"Machine\": \"<uuid>\",\n    \"State\": \"<string>\",\n    \"Archived\": \"<boolean>\",\n    \"Current\": \"<boolean>\",\n    \"Context\": \"<string>\",\n    \"EndTime\": \"<dateTime>\",\n    \"ExitState\": \"<string>\",\n    \"ExtraClaims\": [\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        },\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        }\n    ],\n    \"Previous\": \"<uuid>\",\n    \"StartTime\": \"<dateTime>\",\n    \"Token\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/jobs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs"
							]
						},
						"description": "Create a Job from the provided object, Only Machine and UUID are used."
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Uuid\": \"<uuid>\",\n \"Machine\": \"<uuid>\",\n \"State\": \"<string>\",\n \"Archived\": \"<boolean>\",\n \"Current\": \"<boolean>\",\n \"CurrentIndex\": \"<long>\",\n \"NextIndex\": \"<long>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"EndTime\": \"<dateTime>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExitState\": \"<string>\",\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Previous\": \"<uuid>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stage\": \"<string>\",\n \"StartTime\": \"<dateTime>\",\n \"Task\": \"<string>\",\n \"Token\": \"<string>\",\n \"Validated\": \"<boolean>\",\n \"Workflow\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Uuid\": \"<uuid>\",\n \"Machine\": \"<uuid>\",\n \"State\": \"<string>\",\n \"Archived\": \"<boolean>\",\n \"Current\": \"<boolean>\",\n \"CurrentIndex\": \"<long>\",\n \"NextIndex\": \"<long>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"EndTime\": \"<dateTime>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExitState\": \"<string>\",\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Previous\": \"<uuid>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stage\": \"<string>\",\n \"StartTime\": \"<dateTime>\",\n \"Task\": \"<string>\",\n \"Token\": \"<string>\",\n \"Validated\": \"<boolean>\",\n \"Workflow\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "leases",
			"item": [
				{
					"name": "{address}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a lease Lease",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"leases",
														":address",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Lease specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"leases",
														":address",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/leases/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"leases",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List lease actions Lease",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leases/:address/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "address",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Lease actions for a Lease specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/leases/:address/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"leases",
														":address",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/leases/:address/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"leases",
														":address",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Lease",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leases/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Lease specified by {address}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "LeaseResponse returned on a successful GET, PUT, PATCH, or POST of a single lease",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"ExpireTime\": \"<dateTime>\",\n \"Strategy\": \"<string>\",\n \"State\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"SkipBoot\": \"<boolean>\",\n \"Validated\": \"<boolean>\",\n \"Via\": \"<ipv4>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Lease",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leases/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Lease specified by {address} or return NotFound."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "LeaseResponse returned on a successful GET, PUT, PATCH, or POST of a single lease",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"ExpireTime\": \"<dateTime>\",\n \"Strategy\": \"<string>\",\n \"State\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"SkipBoot\": \"<boolean>\",\n \"Validated\": \"<boolean>\",\n \"Via\": \"<ipv4>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Lease exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leases/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Lease specifiec by {address} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/leases/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leases",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Leases filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"leases"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Addr",
									"value": "<string>"
								},
								{
									"key": "Token",
									"value": "<string>"
								},
								{
									"key": "Strategy",
									"value": "<string>"
								},
								{
									"key": "ExpireTime",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Leases by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nExpireTime = Date/Time\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "LeasesResponse returned on a successful GET of all the leases",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Addr\": \"<ipv4>\",\n  \"Token\": \"<string>\",\n  \"ExpireTime\": \"<dateTime>\",\n  \"Strategy\": \"<string>\",\n  \"State\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Duration\": \"<integer>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"NextServer\": \"<ipv4>\",\n  \"Options\": [\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   },\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   }\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"SkipBoot\": \"<boolean>\",\n  \"Validated\": \"<boolean>\",\n  \"Via\": \"<ipv4>\"\n },\n {\n  \"Addr\": \"<ipv4>\",\n  \"Token\": \"<string>\",\n  \"ExpireTime\": \"<dateTime>\",\n  \"Strategy\": \"<string>\",\n  \"State\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Duration\": \"<integer>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"NextServer\": \"<ipv4>\",\n  \"Options\": [\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   },\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   }\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"SkipBoot\": \"<boolean>\",\n  \"Validated\": \"<boolean>\",\n  \"Via\": \"<ipv4>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Stats of the List Leases filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"leases"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Addr",
									"value": "<string>"
								},
								{
									"key": "Token",
									"value": "<string>"
								},
								{
									"key": "Strategy",
									"value": "<string>"
								},
								{
									"key": "ExpireTime",
									"value": "<string>"
								}
							]
						},
						"description": "This return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nExpireTime = Date/Time\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/leases?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&ExpireTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leases"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "ExpireTime",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "machines",
			"item": [
				{
					"name": "{uuid}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a machine Machine",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Machine specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List machine actions Machine",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Machine actions for a Machine specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "params",
							"item": [
								{
									"name": "{key}",
									"item": [
										{
											"name": "Delete a single machine parameter",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params",
														":key"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Delete a single parameter {key} for a Machine specified by {uuid}"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "MachineParamResponse return on a successful GET of a single Machine param",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a single machine parameter",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params",
														":key"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Delete a single parameter {key} for a Machine specified by {uuid}"
											},
											"response": [
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "MachineParamResponse return on a successful GET of a single Machine param",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "post Machine Param",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params",
														":key"
													],
													"variable": [
														{
															"key": "uuid",
															"value": "<uuid>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Set as single Parameter {key} for a machine specified by {uuid}"
											},
											"response": [
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "MachineParamResponse return on a successful GET of a single Machine param",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/machines/:uuid/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"machines",
																":uuid",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "uuid"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List machine params Machine",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/params?aggregate=<string>&decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"params"
											],
											"query": [
												{
													"key": "aggregate",
													"value": "<string>"
												},
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Machine parms for a Machine specified by {uuid}"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "MachineParamsResponse return on a successful GET of all Machine's Params",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "patch Machine Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/params",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"params"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Update params for Machine {uuid} with the passed-in patch"
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "MachineParamsResponse return on a successful GET of all Machine's Params",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "post Machine Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/params",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"params"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "<uuid>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Sets parameters for a machine specified by {uuid}"
									},
									"response": [
										{
											"name": "MachineParamsResponse return on a successful GET of all Machine's Params",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/machines/:uuid/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"machines",
														":uuid",
														"params"
													],
													"variable": [
														{
															"key": "uuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Machine",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/machines/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Machine specified by {uuid}"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "MachineResponse return on a successful GET, PUT, PATCH or POST of a single Machine",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<hostname>\",\n \"Uuid\": \"<uuid>\",\n \"CurrentTask\": \"<long>\",\n \"Runnable\": \"<boolean>\",\n \"Workflow\": \"<string>\",\n \"Arch\": \"<string>\",\n \"Locked\": \"<boolean>\",\n \"Address\": \"<ipv4>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"CurrentJob\": \"<uuid>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"HardwareAddrs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": \"<string>\",\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Secret\": \"<string>\",\n \"Stage\": \"<string>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Machine",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/machines/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Machine specified by {uuid} or return NotFound."
							},
							"response": [
								{
									"name": "MachineResponse return on a successful GET, PUT, PATCH or POST of a single Machine",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<hostname>\",\n \"Uuid\": \"<uuid>\",\n \"CurrentTask\": \"<long>\",\n \"Runnable\": \"<boolean>\",\n \"Workflow\": \"<string>\",\n \"Arch\": \"<string>\",\n \"Locked\": \"<boolean>\",\n \"Address\": \"<ipv4>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"CurrentJob\": \"<uuid>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"HardwareAddrs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": \"<string>\",\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Secret\": \"<string>\",\n \"Stage\": \"<string>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a Machine exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/machines/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines",
										":uuid"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Machine specifiec by {uuid} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Machine",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines",
										":uuid"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Machine specified by {uuid} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "MachineResponse return on a successful GET, PUT, PATCH or POST of a single Machine",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<hostname>\",\n \"Uuid\": \"<uuid>\",\n \"CurrentTask\": \"<long>\",\n \"Runnable\": \"<boolean>\",\n \"Workflow\": \"<string>\",\n \"Arch\": \"<string>\",\n \"Locked\": \"<boolean>\",\n \"Address\": \"<ipv4>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"CurrentJob\": \"<uuid>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"HardwareAddrs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": \"<string>\",\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Secret\": \"<string>\",\n \"Stage\": \"<string>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Put a Machine",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<hostname>\",\n    \"Uuid\": \"<uuid>\",\n    \"CurrentTask\": \"<long>\",\n    \"Runnable\": \"<boolean>\",\n    \"Workflow\": \"<string>\",\n    \"Arch\": \"<string>\",\n    \"Locked\": \"<boolean>\",\n    \"Address\": \"<ipv4>\",\n    \"BootEnv\": \"<string>\",\n    \"Context\": \"<string>\",\n    \"CurrentJob\": \"<uuid>\",\n    \"Description\": \"<string>\",\n    \"HardwareAddrs\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"OS\": \"<string>\",\n    \"Params\": \"<object>\",\n    \"Profiles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Secret\": \"<string>\",\n    \"Stage\": \"<string>\",\n    \"Tasks\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines",
										":uuid"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Machine specified by {uuid} using a JSON Machine"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "MachineResponse return on a successful GET, PUT, PATCH or POST of a single Machine",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid?force=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid"
											],
											"query": [
												{
													"key": "force",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<hostname>\",\n \"Uuid\": \"<uuid>\",\n \"CurrentTask\": \"<long>\",\n \"Runnable\": \"<boolean>\",\n \"Workflow\": \"<string>\",\n \"Arch\": \"<string>\",\n \"Locked\": \"<boolean>\",\n \"Address\": \"<ipv4>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"CurrentJob\": \"<uuid>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"HardwareAddrs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": \"<string>\",\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Secret\": \"<string>\",\n \"Stage\": \"<string>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Get the public key for secure params on a machine",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/machines/:uuid/pubkey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines",
										":uuid",
										"pubkey"
									],
									"variable": [
										{
											"key": "uuid",
											"value": "<uuid>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the public key for a Machine specified by {uuid}"
							},
							"response": [
								{
									"name": "PubKeyResponse is returned on a successful GET of a Paramer public key for secure params.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"pubkey"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"pubkey"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"pubkey"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"pubkey"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/machines/:uuid/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"machines",
												":uuid",
												"pubkey"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Machines filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"machines"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Uuid",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								},
								{
									"key": "Address",
									"value": "<string>"
								},
								{
									"key": "Runnable",
									"value": "<string>"
								},
								{
									"key": "decode",
									"value": "<boolean>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<boolean>"
								}
							]
						},
						"description": "This will show all Machines by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = UUID string\nName = string\nBootEnv = string\nAddress = IP Address\nRunnable = true/false\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "MachinesResponse return on a successful GET of all Machines",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<hostname>\",\n  \"Uuid\": \"<uuid>\",\n  \"CurrentTask\": \"<long>\",\n  \"Runnable\": \"<boolean>\",\n  \"Workflow\": \"<string>\",\n  \"Arch\": \"<string>\",\n  \"Locked\": \"<boolean>\",\n  \"Address\": \"<ipv4>\",\n  \"Available\": \"<boolean>\",\n  \"BootEnv\": \"<string>\",\n  \"Bundle\": \"<string>\",\n  \"Context\": \"<string>\",\n  \"CurrentJob\": \"<uuid>\",\n  \"Description\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"HardwareAddrs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OS\": \"<string>\",\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"Profiles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Secret\": \"<string>\",\n  \"Stage\": \"<string>\",\n  \"Tasks\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<hostname>\",\n  \"Uuid\": \"<uuid>\",\n  \"CurrentTask\": \"<long>\",\n  \"Runnable\": \"<boolean>\",\n  \"Workflow\": \"<string>\",\n  \"Arch\": \"<string>\",\n  \"Locked\": \"<boolean>\",\n  \"Address\": \"<ipv4>\",\n  \"Available\": \"<boolean>\",\n  \"BootEnv\": \"<string>\",\n  \"Bundle\": \"<string>\",\n  \"Context\": \"<string>\",\n  \"CurrentJob\": \"<uuid>\",\n  \"Description\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"HardwareAddrs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OS\": \"<string>\",\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"Profiles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Secret\": \"<string>\",\n  \"Stage\": \"<string>\",\n  \"Tasks\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n }\n]"
						}
					]
				},
				{
					"name": "Stats of the List Machines filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"machines"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Uuid",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								},
								{
									"key": "Address",
									"value": "<string>"
								},
								{
									"key": "Runnable",
									"value": "<string>"
								},
								{
									"key": "decode",
									"value": "<boolean>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<boolean>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nX-DRP-LIST-COUNT - number of objects in the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = UUID string\nName = string\nBootEnv = string\nAddress = IP Address\nRunnable = true/false\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Uuid=<string>&Name=<string>&BootEnv=<string>&Address=<string>&Runnable=<string>&decode=<boolean>&slim=<boolean>&params=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Uuid",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "Address",
											"value": "<string>"
										},
										{
											"key": "Runnable",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Machine",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<hostname>\",\n    \"Uuid\": \"<uuid>\",\n    \"CurrentTask\": \"<long>\",\n    \"Runnable\": \"<boolean>\",\n    \"Workflow\": \"<string>\",\n    \"Arch\": \"<string>\",\n    \"Locked\": \"<boolean>\",\n    \"Address\": \"<ipv4>\",\n    \"BootEnv\": \"<string>\",\n    \"Context\": \"<string>\",\n    \"CurrentJob\": \"<uuid>\",\n    \"Description\": \"<string>\",\n    \"HardwareAddrs\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"OS\": \"<string>\",\n    \"Params\": \"<object>\",\n    \"Profiles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Secret\": \"<string>\",\n    \"Stage\": \"<string>\",\n    \"Tasks\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/machines?force=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"machines"
							],
							"query": [
								{
									"key": "force",
									"value": "<string>"
								}
							]
						},
						"description": "Create a Machine from the provided object"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "MachineResponse return on a successful GET, PUT, PATCH or POST of a single Machine",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<hostname>\",\n \"Uuid\": \"<uuid>\",\n \"CurrentTask\": \"<long>\",\n \"Runnable\": \"<boolean>\",\n \"Workflow\": \"<string>\",\n \"Arch\": \"<string>\",\n \"Locked\": \"<boolean>\",\n \"Address\": \"<ipv4>\",\n \"Available\": \"<boolean>\",\n \"BootEnv\": \"<string>\",\n \"Bundle\": \"<string>\",\n \"Context\": \"<string>\",\n \"CurrentJob\": \"<uuid>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"HardwareAddrs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OS\": \"<string>\",\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Secret\": \"<string>\",\n \"Stage\": \"<string>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/machines?force=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"machines"
									],
									"query": [
										{
											"key": "force",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "meta/{type}/{id}",
			"item": [
				{
					"name": "Get Metadata for an Object of {type} idendified by {id}",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/meta/:type/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meta",
								":type",
								":id"
							],
							"variable": [
								{
									"key": "type",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								},
								{
									"key": "id",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							]
						},
						"description": "Get the appropriate Metadata or return NotFound."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Patch metadata on an Object of {type} with an ID of {id}",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/meta/:type/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meta",
								":type",
								":id"
							],
							"variable": [
								{
									"key": "type",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								},
								{
									"key": "id",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							]
						},
						"description": "Update metadata on a specific Object using a RFC6902 Patch structure"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meta/:type/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meta",
										":type",
										":id"
									],
									"variable": [
										{
											"key": "type"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "params",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "Delete a Param",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/params/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Param specified by {name}"
							},
							"response": [
								{
									"name": "ParamResponse returned on a successful GET, PUT, PATCH, or POST of a single param",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Secure\": \"<boolean>\",\n \"Schema\": \"<object>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Param",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/params/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Param specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ParamResponse returned on a successful GET, PUT, PATCH, or POST of a single param",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Secure\": \"<boolean>\",\n \"Schema\": \"<object>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "See if a Param exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/params/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Param specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Param",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/params/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Param specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ParamResponse returned on a successful GET, PUT, PATCH, or POST of a single param",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Secure\": \"<boolean>\",\n \"Schema\": \"<object>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Put a Param",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Secure\": \"<boolean>\",\n    \"Schema\": \"<object>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/params/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Param specified by {name} using a JSON Param"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ParamResponse returned on a successful GET, PUT, PATCH, or POST of a single param",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Secure\": \"<boolean>\",\n \"Schema\": \"<object>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/params/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"params",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Params filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"params"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Params by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ParamsResponse returned on a successful GET of all the params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Secure\": \"<boolean>\",\n  \"Schema\": \"<object>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Secure\": \"<boolean>\",\n  \"Schema\": \"<object>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Params filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"params"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Param",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Secure\": \"<boolean>\",\n    \"Schema\": \"<object>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/params",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"params"
							]
						},
						"description": "Create a Param from the provided object"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ParamResponse returned on a successful GET, PUT, PATCH, or POST of a single param",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Secure\": \"<boolean>\",\n \"Schema\": \"<object>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/params",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"params"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "plugin providers",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "Delete a plugin provider",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "The plugin provider will be removed from the system."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a specific plugin with {name}",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get a specific plugin specified by {name}."
							},
							"response": [
								{
									"name": "PluginProvidersResponse returned on a successful GET of an plugin_provider",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"AutoStart\": \"<boolean>\",\n \"AvailableActions\": [\n  {\n   \"Command\": \"<string>\",\n   \"Model\": \"<string>\",\n   \"OptionalParams\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"Provider\": \"<string>\",\n   \"RequiredParams\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  {\n   \"Command\": \"<string>\",\n   \"Model\": \"<string>\",\n   \"OptionalParams\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"Provider\": \"<string>\",\n   \"RequiredParams\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  }\n ],\n \"Content\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"HasPublish\": \"<boolean>\",\n \"Name\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PluginVersion\": \"<long>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"StoreObjects\": \"<object>\",\n \"Version\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Plugin Provider exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								},
								"description": "Return 200 if the Plugin Provider specified by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Upload a plugin provider to a specific {name}.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/plugin_providers/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								}
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "PluginProviderInfoResponse returned on a successful upload of an iso",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"path\": \"<string>\",\n \"size\": \"<long>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Insufficient Storage (WebDAV) (RFC 4918)",
									"code": 507,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugin_providers/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugin_providers",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "list Plugin Providers",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugin_providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugin_providers"
							]
						},
						"description": "Lists possible plugin_provider on the system to create plugins"
					},
					"response": [
						{
							"name": "PluginProvidersResponse returned on a successful GET of all plugin_provider",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"AutoStart\": \"<boolean>\",\n  \"AvailableActions\": [\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   },\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   }\n  ],\n  \"Content\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"HasPublish\": \"<boolean>\",\n  \"Name\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"PluginVersion\": \"<long>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"StoreObjects\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n {\n  \"AutoStart\": \"<boolean>\",\n  \"AvailableActions\": [\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   },\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   }\n  ],\n  \"Content\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"HasPublish\": \"<boolean>\",\n  \"Name\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"PluginVersion\": \"<long>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"StoreObjects\": \"<object>\",\n  \"Version\": \"<string>\"\n }\n]"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "head Plugin Providers",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugin_providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugin_providers"
							],
							"variable": [
								{
									"key": "name",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							]
						},
						"description": "Stats of the list of plugin_provider on the system to create plugins"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "PluginProvidersResponse returned on a successful GET of all plugin_provider",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"AutoStart\": \"<boolean>\",\n  \"AvailableActions\": [\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   },\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   }\n  ],\n  \"Content\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"HasPublish\": \"<boolean>\",\n  \"Name\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"PluginVersion\": \"<long>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"StoreObjects\": \"<object>\",\n  \"Version\": \"<string>\"\n },\n {\n  \"AutoStart\": \"<boolean>\",\n  \"AvailableActions\": [\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   },\n   {\n    \"Command\": \"<string>\",\n    \"Model\": \"<string>\",\n    \"OptionalParams\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"Provider\": \"<string>\",\n    \"RequiredParams\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   }\n  ],\n  \"Content\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"HasPublish\": \"<boolean>\",\n  \"Name\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"PluginVersion\": \"<long>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"StoreObjects\": \"<object>\",\n  \"Version\": \"<string>\"\n }\n]"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugin_providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugin_providers"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "plugins",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a plugin Plugin",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Plugin specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List plugin actions Plugin",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Plugin actions for a Plugin specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "params",
							"item": [
								{
									"name": "{key}",
									"item": [
										{
											"name": "Delete a single plugin parameter",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params",
														":key"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Delete a single parameter {key} for a Plugin specified by {uuid}"
											},
											"response": [
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "PluginParamResponse return on a successful GET of one Plugin's Param",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "post Plugin Param",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params",
														":key"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Set as single Parameter {key} for a plugin specified by {name}"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "PluginParamResponse return on a successful GET of one Plugin's Param",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/plugins/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"plugins",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List plugin params Plugin",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"params"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Plugin parms for a Plugin specified by {name}"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "PluginParamsResponse return on a successful GET of all Plugin's Params",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "patch Plugin Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"params"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Update params for Plugin {name} with the passed-in patch"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "PluginParamsResponse return on a successful GET of all Plugin's Params",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "post Plugin Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"params"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Sets parameters for a plugin specified by {name}"
									},
									"response": [
										{
											"name": "PluginParamsResponse return on a successful GET of all Plugin's Params",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/plugins/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"plugins",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Plugin",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Plugin specified by {name}"
							},
							"response": [
								{
									"name": "PluginResponse return on a successful GET, PUT, PATCH or POST of a single Plugin",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Provider\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"PluginErrors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Plugin",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Plugin specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "PluginResponse return on a successful GET, PUT, PATCH or POST of a single Plugin",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Provider\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"PluginErrors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Plugin exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Plugin specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Plugin",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Plugin specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "PluginResponse return on a successful GET, PUT, PATCH or POST of a single Plugin",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Provider\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"PluginErrors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Plugin",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Provider\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Params\": \"<object>\",\n    \"PluginErrors\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Plugin specified by {name} using a JSON Plugin"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "PluginResponse return on a successful GET, PUT, PATCH or POST of a single Plugin",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Provider\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"PluginErrors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get the public key for secure params on a plugin",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/pubkey?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"pubkey"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the public key for a Plugin specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "PubKeyResponse is returned on a successful GET of a Paramer public key for secure params.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Plugins filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Provider",
									"value": "<string>"
								},
								{
									"key": "decode",
									"value": "<boolean>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Plugins by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "PluginsResponse return on a successful GET of all Plugins",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Provider\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"PluginErrors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Provider\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"PluginErrors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Stats of the List Plugins filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Provider",
									"value": "<string>"
								},
								{
									"key": "decode",
									"value": "<boolean>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Provider=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Provider",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Plugin",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Provider\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Params\": \"<object>\",\n    \"PluginErrors\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/plugins",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins"
							]
						},
						"description": "Create a Plugin from the provided object"
					},
					"response": [
						{
							"name": "PluginResponse return on a successful GET, PUT, PATCH or POST of a single Plugin",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Provider\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"PluginErrors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete a single plugin parameter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugins/:uuid/params/:key?decode=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins",
								":uuid",
								"params",
								":key"
							],
							"query": [
								{
									"key": "decode",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"key": "name",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								},
								{
									"key": "key",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							]
						},
						"description": "Delete a single parameter {key} for a Plugin specified by {uuid}"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "PluginParamResponse return on a successful GET of one Plugin's Param",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "prefs",
			"item": [
				{
					"name": "Lists Prefs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/prefs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prefs"
							]
						},
						"description": "This will show all Prefs by default"
					},
					"response": [
						{
							"name": "PrefsResponse returned on a successful GET of all preferences",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Pref",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"<object>\""
						},
						"url": {
							"raw": "{{baseUrl}}/prefs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prefs"
							]
						},
						"description": "Create a Pref from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "PrefsResponse returned on a successful GET of all preferences",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseUrl}}/prefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"prefs"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "profiles",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a profile Profile",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Profile specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List profile actions Profile",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Profile actions for a Profile specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "params",
							"item": [
								{
									"name": "{key}",
									"item": [
										{
											"name": "Delete a single profile parameter",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params",
														":key"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Delete a single parameter {key} for a Profile specified by {uuid}"
											},
											"response": [
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ProfileParamResponse return on a successful GET of a single Param for a Profile",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "post Profile Param",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params",
														":key"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Set as single Parameter {key} for a profile specified by {name}"
											},
											"response": [
												{
													"name": "ProfileParamResponse return on a successful GET of a single Param for a Profile",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/profiles/:name/params/:key?decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"profiles",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List profile params Profile",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"params"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Profile parms for a Profile specified by {name}"
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ProfileParamsResponse return on a successful GET of all Profile's Params",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "patch Profile Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"params"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Update params for Profile {name} with the passed-in patch"
									},
									"response": [
										{
											"name": "ProfileParamsResponse return on a successful GET of all Profile's Params",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "post Profile Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"params"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Sets parameters for a profile specified by {name}"
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ProfileParamsResponse return on a successful GET of all Profile's Params",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/profiles/:name/params?decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"profiles",
														":name",
														"params"
													],
													"query": [
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Profile",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Profile specified by {name}"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ProfileResponse returned on a successful GET, PUT, PATCH, or POST of a single profile",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Profile",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Profile specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ProfileResponse returned on a successful GET, PUT, PATCH, or POST of a single profile",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a Profile exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Profile specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Profile",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Profile specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ProfileResponse returned on a successful GET, PUT, PATCH, or POST of a single profile",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Profile",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Params\": \"<object>\",\n    \"Profiles\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":name"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Profile specified by {name} using a JSON Profile"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ProfileResponse returned on a successful GET, PUT, PATCH, or POST of a single profile",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get the public key for secure params on a profile",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/profiles/:name/pubkey?decode=<string>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":name",
										"pubkey"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the public key for a Profile specified by {name}"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "PubKeyResponse is returned on a successful GET of a Paramer public key for secure params.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/profiles/:name/pubkey?decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profiles",
												":name",
												"pubkey"
											],
											"query": [
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Profiles filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profiles"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "decode",
									"value": "<boolean>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Profiles by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ProfilesResponse returned on a successful GET of all the profiles",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"Profiles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"Profiles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Stats of the List Profiles filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profiles"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "decode",
									"value": "<boolean>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&decode=<boolean>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "decode",
											"value": "<boolean>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Profile",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Params\": \"<object>\",\n    \"Profiles\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/profiles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profiles"
							]
						},
						"description": "Create a Profile from the provided object"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ProfileResponse returned on a successful GET, PUT, PATCH, or POST of a single profile",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Delete a single profile parameter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/profiles/:uuid/params/:key?decode=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profiles",
								":uuid",
								"params",
								":key"
							],
							"query": [
								{
									"key": "decode",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"key": "name",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								},
								{
									"key": "key",
									"value": "<string>",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							]
						},
						"description": "Delete a single parameter {key} for a Profile specified by {uuid}"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ProfileParamResponse return on a successful GET of a single Param for a Profile",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/profiles/:uuid/params/:key?decode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profiles",
										":uuid",
										"params",
										":key"
									],
									"query": [
										{
											"key": "decode",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "uuid"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "reservations",
			"item": [
				{
					"name": "{address}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a reservation Reservation",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reservations",
														":address",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Reservation specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reservations",
														":address",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/reservations/:address/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reservations",
																":address",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "address"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List reservation actions Reservation",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "address",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Reservation actions for a Reservation specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reservations/:address/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reservations",
														":address",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reservations/:address/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reservations",
														":address",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "address"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Reservation",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservations/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Reservation specified by {address}"
							},
							"response": [
								{
									"name": "ReservationResponse returned on a successful GET, PUT, PATCH, or POST of a single reservation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"Strategy\": \"<string>\",\n \"Scoped\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Reservation",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservations/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Reservation specified by {address} or return NotFound."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ReservationResponse returned on a successful GET, PUT, PATCH, or POST of a single reservation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"Strategy\": \"<string>\",\n \"Scoped\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "See if a Reservation exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservations/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Reservation specific by {address} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Reservation",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/reservations/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Reservation specified by {address} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ReservationResponse returned on a successful GET, PUT, PATCH, or POST of a single reservation",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"Strategy\": \"<string>\",\n \"Scoped\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Put a Reservation",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Addr\": \"<ipv4>\",\n    \"Token\": \"<string>\",\n    \"Strategy\": \"<string>\",\n    \"Scoped\": \"<boolean>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Duration\": \"<integer>\",\n    \"NextServer\": \"<ipv4>\",\n    \"Options\": [\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        },\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        }\n    ],\n    \"Subnet\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reservations/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "<ipv4>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Reservation specified by {address} using a JSON Reservation"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ReservationResponse returned on a successful GET, PUT, PATCH, or POST of a single reservation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"Strategy\": \"<string>\",\n \"Scoped\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reservations/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reservations",
												":address"
											],
											"variable": [
												{
													"key": "address"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Reservations filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reservations"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Addr",
									"value": "<string>"
								},
								{
									"key": "Token",
									"value": "<string>"
								},
								{
									"key": "Strategy",
									"value": "<string>"
								},
								{
									"key": "NextServer",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Reservations by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nNextServer = IP Address\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ReservationsResponse returned on a successful GET of all the reservations",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Addr\": \"<ipv4>\",\n  \"Token\": \"<string>\",\n  \"Strategy\": \"<string>\",\n  \"Scoped\": \"<boolean>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Duration\": \"<integer>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"NextServer\": \"<ipv4>\",\n  \"Options\": [\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   },\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   }\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Subnet\": \"<string>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Addr\": \"<ipv4>\",\n  \"Token\": \"<string>\",\n  \"Strategy\": \"<string>\",\n  \"Scoped\": \"<boolean>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Duration\": \"<integer>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"NextServer\": \"<ipv4>\",\n  \"Options\": [\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   },\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   }\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Subnet\": \"<string>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						}
					]
				},
				{
					"name": "Stats of the List Reservations filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reservations"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Addr",
									"value": "<string>"
								},
								{
									"key": "Token",
									"value": "<string>"
								},
								{
									"key": "Strategy",
									"value": "<string>"
								},
								{
									"key": "NextServer",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nNextServer = IP Address\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Addr=<string>&Token=<string>&Strategy=<string>&NextServer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Addr",
											"value": "<string>"
										},
										{
											"key": "Token",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Reservation",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Addr\": \"<ipv4>\",\n    \"Token\": \"<string>\",\n    \"Strategy\": \"<string>\",\n    \"Scoped\": \"<boolean>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Duration\": \"<integer>\",\n    \"NextServer\": \"<ipv4>\",\n    \"Options\": [\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        },\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        }\n    ],\n    \"Subnet\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reservations"
							]
						},
						"description": "Create a Reservation from the provided object"
					},
					"response": [
						{
							"name": "ReservationResponse returned on a successful GET, PUT, PATCH, or POST of a single reservation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Addr\": \"<ipv4>\",\n \"Token\": \"<string>\",\n \"Strategy\": \"<string>\",\n \"Scoped\": \"<boolean>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Duration\": \"<integer>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"NextServer\": \"<ipv4>\",\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservations"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "roles",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a role Role",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Role specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/roles/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"roles",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List role actions Role",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Role actions for a Role specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/roles/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/roles/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Role",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Role specified by {name}"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "RoleResponse returned on a successful GET, PUT, PATCH, or POST of a single role",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Claims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Role",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Role specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "RoleResponse returned on a successful GET, PUT, PATCH, or POST of a single role",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Claims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a Role exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Role specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Role",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/roles/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Role specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "RoleResponse returned on a successful GET, PUT, PATCH, or POST of a single role",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Claims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Put a Role",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Claims\": [\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        },\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        }\n    ],\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/roles/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Role specified by {name} using a JSON Role"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "RoleResponse returned on a successful GET, PUT, PATCH, or POST of a single role",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Claims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Roles filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Roles by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "RolesResponse returned on a successful GET of all the roles",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Claims\": [\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   },\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   }\n  ],\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Claims\": [\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   },\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   }\n  ],\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Roles filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a Role",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Claims\": [\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        },\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        }\n    ],\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Create a Role from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "RoleResponse returned on a successful GET, PUT, PATCH, or POST of a single role",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Claims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "stages",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a stage Stage",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Stage specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List stage actions Stage",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Stage actions for a Stage specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "params",
							"item": [
								{
									"name": "{key}",
									"item": [
										{
											"name": "Delete a single stage parameter",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params",
														":key"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Delete a single parameter {key} for a Stage specified by {name}"
											},
											"response": [
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "StageParamResponse return on a successful GET of a single Stage param",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a single stage parameter",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params",
														":key"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Delete a single parameter {key} for a Stage specified by {name}"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "StageParamResponse return on a successful GET of a single Stage param",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key?aggregate=<string>&decode=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"query": [
																{
																	"key": "aggregate",
																	"value": "<string>"
																},
																{
																	"key": "decode",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												}
											]
										},
										{
											"name": "post Stage Param",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params",
														":key"
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "key",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Set as single Parameter {key} for a stage specified by {name}"
											},
											"response": [
												{
													"name": "StageParamResponse return on a successful GET of a single Stage param",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "NoContentResponse is returned for deletes and auth errors",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stages/:name/params/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stages",
																":name",
																"params",
																":key"
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List stage params Stage",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/params?aggregate=<string>&decode=<string>&params=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"params"
											],
											"query": [
												{
													"key": "aggregate",
													"value": "<string>"
												},
												{
													"key": "decode",
													"value": "<string>"
												},
												{
													"key": "params",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Stage parms for a Stage specified by {name}"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "StageParamsResponse return on a successful GET of all Stage' Params",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params?aggregate=<string>&decode=<string>&params=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"query": [
														{
															"key": "aggregate",
															"value": "<string>"
														},
														{
															"key": "decode",
															"value": "<string>"
														},
														{
															"key": "params",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "patch Stage Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/stages/:name/params",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"params"
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Update params for Stage {name} with the passed-in patch"
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "StageParamsResponse return on a successful GET of all Stage' Params",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "post Stage Params",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseUrl}}/stages/:name/params",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"params"
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Sets parameters for a stage specified by {name}"
									},
									"response": [
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "StageParamsResponse return on a successful GET of all Stage' Params",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "NoContentResponse is returned for deletes and auth errors",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stages/:name/params",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stages",
														":name",
														"params"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Stage",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stages/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Stage specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "StageResponse returned on a successful GET, PUT, PATCH, or POST of a single stage",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootEnv\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Reboot\": \"<boolean>\",\n \"RunnerWait\": \"<boolean>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Get a Stage",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stages/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Stage specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "StageResponse returned on a successful GET, PUT, PATCH, or POST of a single stage",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootEnv\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Reboot\": \"<boolean>\",\n \"RunnerWait\": \"<boolean>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a Stage exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stages/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Stage specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Stage",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/stages/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Stage specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "StageResponse returned on a successful GET, PUT, PATCH, or POST of a single stage",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootEnv\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Reboot\": \"<boolean>\",\n \"RunnerWait\": \"<boolean>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Put a Stage",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Templates\": [\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        },\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        }\n    ],\n    \"RequiredParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"BootEnv\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"OptionalParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Params\": \"<object>\",\n    \"Profiles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Reboot\": \"<boolean>\",\n    \"RunnerWait\": \"<boolean>\",\n    \"Tasks\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stages/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Stage specified by {name} using a JSON Stage"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "StageResponse returned on a successful GET, PUT, PATCH, or POST of a single stage",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootEnv\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Reboot\": \"<boolean>\",\n \"RunnerWait\": \"<boolean>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get the public key for secure params on a stage",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stages/:name/pubkey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages",
										":name",
										"pubkey"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the public key for a Stage specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"pubkey"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"pubkey"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"pubkey"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "PubKeyResponse is returned on a successful GET of a Paramer public key for secure params.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"pubkey"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stages/:name/pubkey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages",
												":name",
												"pubkey"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Stages filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stages"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Reboot",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Stages by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "StagesResponse returned on a successful GET of all the stages",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Templates\": [\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   },\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   }\n  ],\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"BootEnv\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"Profiles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Reboot\": \"<boolean>\",\n  \"RunnerWait\": \"<boolean>\",\n  \"Tasks\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Templates\": [\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   },\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   }\n  ],\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"BootEnv\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Params\": \"<object>\",\n  \"Partial\": \"<boolean>\",\n  \"Profiles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Reboot\": \"<boolean>\",\n  \"RunnerWait\": \"<boolean>\",\n  \"Tasks\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Stages filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stages"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Reboot",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								},
								{
									"key": "slim",
									"value": "<boolean>"
								},
								{
									"key": "params",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>&slim=<boolean>&params=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										},
										{
											"key": "slim",
											"value": "<boolean>"
										},
										{
											"key": "params",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Stage",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Templates\": [\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        },\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        }\n    ],\n    \"RequiredParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"BootEnv\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"OptionalParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Params\": \"<object>\",\n    \"Profiles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Reboot\": \"<boolean>\",\n    \"RunnerWait\": \"<boolean>\",\n    \"Tasks\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/stages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stages"
							]
						},
						"description": "Create a Stage from the provided object"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "StageResponse returned on a successful GET, PUT, PATCH, or POST of a single stage",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"BootEnv\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Params\": \"<object>\",\n \"Partial\": \"<boolean>\",\n \"Profiles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Reboot\": \"<boolean>\",\n \"RunnerWait\": \"<boolean>\",\n \"Tasks\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "subnets",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a subnet Subnet",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"subnets",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Subnet specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"subnets",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/subnets/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"subnets",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List subnet actions Subnet",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Subnet actions for a Subnet specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/subnets/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"subnets",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/subnets/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"subnets",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Subnet",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/subnets/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Subnet specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "SubnetResponse returned on a successful GET, PUT, PATCH, or POST of a single subnet",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Enabled\": \"<boolean>\",\n \"Proxy\": \"<boolean>\",\n \"Unmanaged\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"NextServer\": \"<ipv4>\",\n \"ActiveStart\": \"<ipv4>\",\n \"ActiveEnd\": \"<ipv4>\",\n \"ActiveLeaseTime\": \"<integer>\",\n \"ReservedLeaseTime\": \"<integer>\",\n \"OnlyReservations\": \"<boolean>\",\n \"Strategy\": \"<string>\",\n \"Pickers\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Subnet",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/subnets/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Subnet specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "SubnetResponse returned on a successful GET, PUT, PATCH, or POST of a single subnet",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Enabled\": \"<boolean>\",\n \"Proxy\": \"<boolean>\",\n \"Unmanaged\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"NextServer\": \"<ipv4>\",\n \"ActiveStart\": \"<ipv4>\",\n \"ActiveEnd\": \"<ipv4>\",\n \"ActiveLeaseTime\": \"<integer>\",\n \"ReservedLeaseTime\": \"<integer>\",\n \"OnlyReservations\": \"<boolean>\",\n \"Strategy\": \"<string>\",\n \"Pickers\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "See if a Subnet exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/subnets/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Subnet specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Subnet",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/subnets/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Subnet specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "SubnetResponse returned on a successful GET, PUT, PATCH, or POST of a single subnet",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Enabled\": \"<boolean>\",\n \"Proxy\": \"<boolean>\",\n \"Unmanaged\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"NextServer\": \"<ipv4>\",\n \"ActiveStart\": \"<ipv4>\",\n \"ActiveEnd\": \"<ipv4>\",\n \"ActiveLeaseTime\": \"<integer>\",\n \"ReservedLeaseTime\": \"<integer>\",\n \"OnlyReservations\": \"<boolean>\",\n \"Strategy\": \"<string>\",\n \"Pickers\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Put a Subnet",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Enabled\": \"<boolean>\",\n    \"Proxy\": \"<boolean>\",\n    \"Unmanaged\": \"<boolean>\",\n    \"Subnet\": \"<string>\",\n    \"NextServer\": \"<ipv4>\",\n    \"ActiveStart\": \"<ipv4>\",\n    \"ActiveEnd\": \"<ipv4>\",\n    \"ActiveLeaseTime\": \"<integer>\",\n    \"ReservedLeaseTime\": \"<integer>\",\n    \"OnlyReservations\": \"<boolean>\",\n    \"Strategy\": \"<string>\",\n    \"Pickers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Options\": [\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        },\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/subnets/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Subnet specified by {name} using a JSON Subnet"
							},
							"response": [
								{
									"name": "SubnetResponse returned on a successful GET, PUT, PATCH, or POST of a single subnet",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Enabled\": \"<boolean>\",\n \"Proxy\": \"<boolean>\",\n \"Unmanaged\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"NextServer\": \"<ipv4>\",\n \"ActiveStart\": \"<ipv4>\",\n \"ActiveEnd\": \"<ipv4>\",\n \"ActiveLeaseTime\": \"<integer>\",\n \"ReservedLeaseTime\": \"<integer>\",\n \"OnlyReservations\": \"<boolean>\",\n \"Strategy\": \"<string>\",\n \"Pickers\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/subnets/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"subnets",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Subnets filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subnets"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Strategy",
									"value": "<string>"
								},
								{
									"key": "NextServer",
									"value": "<string>"
								},
								{
									"key": "Subnet",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Enabled",
									"value": "<string>"
								},
								{
									"key": "Proxy",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Subnets by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nNextServer = IP Address\nSubnet = CIDR Address\nStrategy = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nEnabled = boolean\nProxy = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "SubnetsResponse returned on a successful GET of all the subnets",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Enabled\": \"<boolean>\",\n  \"Proxy\": \"<boolean>\",\n  \"Unmanaged\": \"<boolean>\",\n  \"Subnet\": \"<string>\",\n  \"NextServer\": \"<ipv4>\",\n  \"ActiveStart\": \"<ipv4>\",\n  \"ActiveEnd\": \"<ipv4>\",\n  \"ActiveLeaseTime\": \"<integer>\",\n  \"ReservedLeaseTime\": \"<integer>\",\n  \"OnlyReservations\": \"<boolean>\",\n  \"Strategy\": \"<string>\",\n  \"Pickers\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Options\": [\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   },\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   }\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Enabled\": \"<boolean>\",\n  \"Proxy\": \"<boolean>\",\n  \"Unmanaged\": \"<boolean>\",\n  \"Subnet\": \"<string>\",\n  \"NextServer\": \"<ipv4>\",\n  \"ActiveStart\": \"<ipv4>\",\n  \"ActiveEnd\": \"<ipv4>\",\n  \"ActiveLeaseTime\": \"<integer>\",\n  \"ReservedLeaseTime\": \"<integer>\",\n  \"OnlyReservations\": \"<boolean>\",\n  \"Strategy\": \"<string>\",\n  \"Pickers\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Options\": [\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   },\n   {\n    \"Code\": \"<uint8>\",\n    \"Value\": \"<string>\"\n   }\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						}
					]
				},
				{
					"name": "Stats of the List Subnets filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subnets"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Strategy",
									"value": "<string>"
								},
								{
									"key": "NextServer",
									"value": "<string>"
								},
								{
									"key": "Subnet",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Enabled",
									"value": "<string>"
								},
								{
									"key": "Proxy",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nNextServer = IP Address\nSubnet = CIDR Address\nStrategy = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nEnabled = boolean\nProxy = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Strategy=<string>&NextServer=<string>&Subnet=<string>&Name=<string>&Enabled=<string>&Proxy=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Strategy",
											"value": "<string>"
										},
										{
											"key": "NextServer",
											"value": "<string>"
										},
										{
											"key": "Subnet",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Enabled",
											"value": "<string>"
										},
										{
											"key": "Proxy",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a Subnet",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Enabled\": \"<boolean>\",\n    \"Proxy\": \"<boolean>\",\n    \"Unmanaged\": \"<boolean>\",\n    \"Subnet\": \"<string>\",\n    \"NextServer\": \"<ipv4>\",\n    \"ActiveStart\": \"<ipv4>\",\n    \"ActiveEnd\": \"<ipv4>\",\n    \"ActiveLeaseTime\": \"<integer>\",\n    \"ReservedLeaseTime\": \"<integer>\",\n    \"OnlyReservations\": \"<boolean>\",\n    \"Strategy\": \"<string>\",\n    \"Pickers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Options\": [\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        },\n        {\n            \"Code\": \"<uint8>\",\n            \"Value\": \"<string>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/subnets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subnets"
							]
						},
						"description": "Create a Subnet from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "SubnetResponse returned on a successful GET, PUT, PATCH, or POST of a single subnet",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Enabled\": \"<boolean>\",\n \"Proxy\": \"<boolean>\",\n \"Unmanaged\": \"<boolean>\",\n \"Subnet\": \"<string>\",\n \"NextServer\": \"<ipv4>\",\n \"ActiveStart\": \"<ipv4>\",\n \"ActiveEnd\": \"<ipv4>\",\n \"ActiveLeaseTime\": \"<integer>\",\n \"ReservedLeaseTime\": \"<integer>\",\n \"OnlyReservations\": \"<boolean>\",\n \"Strategy\": \"<string>\",\n \"Pickers\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Options\": [\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  },\n  {\n   \"Code\": \"<uint8>\",\n   \"Value\": \"<string>\"\n  }\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/subnets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"subnets"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "system",
			"item": [
				{
					"name": "actions",
					"item": [
						{
							"name": "{cmd}",
							"item": [
								{
									"name": "List specific action for System",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"system",
												"actions",
												":cmd"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "cmd",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List specific {cmd} action for System\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionResponse return on a successful GET of a single Action",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Call an action on the system.",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"system",
												"actions",
												":cmd"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "cmd",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionPostResponse return on a successful POST of action",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<object>\""
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/system/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"system",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "cmd"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List system actions System",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/system/actions?plugin=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"actions"
									],
									"query": [
										{
											"key": "plugin",
											"value": "<string>"
										}
									]
								},
								"description": "List System actions\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
							},
							"response": [
								{
									"name": "ActionsResponse return on a successful GET of all Actions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/system/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"system",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/system/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"system",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Upload a file to upgrade the DRP system",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/system/upgrade",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"system",
								"upgrade"
							]
						},
						"description": "The file will be uploaded and used to replace the running DRP instance."
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Insufficient Storage (WebDAV) (RFC 4918)",
							"code": 507,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "FileInfoResponse returned on a successful upload of a file",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Path\": \"<string>\",\n \"Size\": \"<long>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/system/upgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"system",
										"upgrade"
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a task Task",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Task specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tasks/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tasks",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List task actions Task",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Task actions for a Task specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/tasks/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/tasks/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Task",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tasks/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Task specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TaskResponse return on a successful GET, PUT, PATCH or POST of a single Task",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"ExtraRoles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Prerequisites\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Get a Task",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tasks/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Task specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "TaskResponse return on a successful GET, PUT, PATCH or POST of a single Task",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"ExtraRoles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Prerequisites\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Task exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tasks/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Task specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Task",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/tasks/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Task specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TaskResponse return on a successful GET, PUT, PATCH or POST of a single Task",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"ExtraRoles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Prerequisites\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Task",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Templates\": [\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        },\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        }\n    ],\n    \"RequiredParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"OptionalParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"ExtraClaims\": [\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        },\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        }\n    ],\n    \"ExtraRoles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Prerequisites\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tasks/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Task specified by {name} using a JSON Task"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TaskResponse return on a successful GET, PUT, PATCH or POST of a single Task",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"ExtraRoles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Prerequisites\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Tasks filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Tasks by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "TasksResponse return on a successful GET of all Tasks",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Templates\": [\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   },\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   }\n  ],\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ExtraClaims\": [\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   },\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   }\n  ],\n  \"ExtraRoles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Prerequisites\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Templates\": [\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   },\n   {\n    \"Name\": \"<string>\",\n    \"Path\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"ID\": \"<string>\",\n    \"Link\": \"<string>\",\n    \"Meta\": \"<object>\"\n   }\n  ],\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ExtraClaims\": [\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   },\n   {\n    \"action\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"specific\": \"<string>\"\n   }\n  ],\n  \"ExtraRoles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Prerequisites\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						}
					]
				},
				{
					"name": "Stats of the List Tasks filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Task",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Templates\": [\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        },\n        {\n            \"Name\": \"<string>\",\n            \"Path\": \"<string>\",\n            \"Contents\": \"<string>\",\n            \"ID\": \"<string>\",\n            \"Link\": \"<string>\",\n            \"Meta\": \"<object>\"\n        }\n    ],\n    \"RequiredParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"OptionalParams\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"ExtraClaims\": [\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        },\n        {\n            \"action\": \"<string>\",\n            \"scope\": \"<string>\",\n            \"specific\": \"<string>\"\n        }\n    ],\n    \"ExtraRoles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Prerequisites\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "Create a Task from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "TaskResponse return on a successful GET, PUT, PATCH or POST of a single Task",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Templates\": [\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  },\n  {\n   \"Name\": \"<string>\",\n   \"Path\": \"<string>\",\n   \"Contents\": \"<string>\",\n   \"ID\": \"<string>\",\n   \"Link\": \"<string>\",\n   \"Meta\": \"<object>\"\n  }\n ],\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ExtraClaims\": [\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  },\n  {\n   \"action\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"specific\": \"<string>\"\n  }\n ],\n \"ExtraRoles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Prerequisites\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "templates",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a template Template",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"templates",
														":id",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Template specified by {id}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"templates",
														":id",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/templates/:id/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"templates",
																":id",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List template actions Template",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/templates/:id/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Template actions for a Template specified by {id}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/templates/:id/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"templates",
														":id",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/templates/:id/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"templates",
														":id",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Template",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/templates/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Template specified by {id}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TemplateResponse return on a successful GET, PUT, PATCH or POST of a single Template",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ID\": \"<string>\",\n \"Contents\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Template",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/templates/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Template specified by {id} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "TemplateResponse return on a successful GET, PUT, PATCH or POST of a single Template",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ID\": \"<string>\",\n \"Contents\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Template exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/templates/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Template specifiec by {id} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Template",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/templates/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Template specified by {id} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TemplateResponse return on a successful GET, PUT, PATCH or POST of a single Template",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ID\": \"<string>\",\n \"Contents\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Put a Template",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ID\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"Description\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/templates/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Template specified by {id} using a JSON Template"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TemplateResponse return on a successful GET, PUT, PATCH or POST of a single Template",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ID\": \"<string>\",\n \"Contents\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Templates filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"templates"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "ID",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Templates by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nID = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nID=fred - returns items named fred\nID=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "TemplatesResponse return on a successful GET of all templates",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"ID\": \"<string>\",\n  \"Contents\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"ID\": \"<string>\",\n  \"Contents\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Templates filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"templates"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "ID",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nID = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nID=fred - returns items named fred\nID=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&ID=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "ID",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Template",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ID\": \"<string>\",\n    \"Contents\": \"<string>\",\n    \"Description\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"templates"
							]
						},
						"description": "Create a Template from the provided object"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "TemplateResponse return on a successful GET, PUT, PATCH or POST of a single Template",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ID\": \"<string>\",\n \"Contents\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"templates"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tenants",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a tenant Tenant",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tenants",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Tenant specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tenants",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/tenants/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"tenants",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List tenant actions Tenant",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Tenant actions for a Tenant specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/tenants/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tenants",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/tenants/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tenants",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Tenant",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tenants/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Tenant specified by {name}"
							},
							"response": [
								{
									"name": "TenantResponse returned on a successful GET, PUT, PATCH, or POST of a single tenant",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Members\": \"<object>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Users\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Tenant",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tenants/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Tenant specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "TenantResponse returned on a successful GET, PUT, PATCH, or POST of a single tenant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Members\": \"<object>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Users\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "See if a Tenant exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tenants/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Tenant specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Tenant",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/tenants/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Tenant specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TenantResponse returned on a successful GET, PUT, PATCH, or POST of a single tenant",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Members\": \"<object>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Users\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Tenant",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Members\": \"<object>\",\n    \"Name\": \"<string>\",\n    \"Users\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tenants/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Tenant specified by {name} using a JSON Tenant"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "TenantResponse returned on a successful GET, PUT, PATCH, or POST of a single tenant",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Members\": \"<object>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Users\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tenants/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tenants",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Tenants filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tenants"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Tenants by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "TenantsResponse returned on a successful GET of all the tenants",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Members\": \"<object>\",\n  \"Name\": \"<string>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Users\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Members\": \"<object>\",\n  \"Name\": \"<string>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Users\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Tenants filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tenants"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Tenant",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Members\": \"<object>\",\n    \"Name\": \"<string>\",\n    \"Users\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tenants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tenants"
							]
						},
						"description": "Create a Tenant from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "TenantResponse returned on a successful GET, PUT, PATCH, or POST of a single tenant",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tenants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tenants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Members\": \"<object>\",\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Users\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a user User",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a User specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List user actions User",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List User actions for a User specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										},
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a User specified by {name}"
							},
							"response": [
								{
									"name": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PasswordHash\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Roles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Secret\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the User specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PasswordHash\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Roles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Secret\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a User exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the User specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a User specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PasswordHash\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Roles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Secret\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"PasswordHash\": [\n        \"<uint8>\",\n        \"<uint8>\"\n    ],\n    \"Roles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Secret\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a User specified by {name} using a JSON User"
							},
							"response": [
								{
									"name": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PasswordHash\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Roles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Secret\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set the password for a user.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Password\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:name/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name",
										"password"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a User specified by {name} using a JSON User"
							},
							"response": [
								{
									"name": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PasswordHash\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Roles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Secret\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:name/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"password"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a User Token",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:name/token?ttl=<long>&roles=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":name",
										"token"
									],
									"query": [
										{
											"key": "ttl",
											"value": "<long>"
										},
										{
											"key": "roles",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get a token for the User specified by {name} or return error"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name/token?ttl=<long>&roles=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"token"
											],
											"query": [
												{
													"key": "ttl",
													"value": "<long>"
												},
												{
													"key": "roles",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "UserTokenResponse returned on a successful GET of user token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name/token?ttl=<long>&roles=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"token"
											],
											"query": [
												{
													"key": "ttl",
													"value": "<long>"
												},
												{
													"key": "roles",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Info\": {\n  \"arch\": \"<string>\",\n  \"os\": \"<string>\",\n  \"version\": \"<string>\",\n  \"id\": \"<string>\",\n  \"local_id\": \"<string>\",\n  \"ha_id\": \"<string>\",\n  \"api_port\": \"<long>\",\n  \"file_port\": \"<long>\",\n  \"dhcp_port\": \"<long>\",\n  \"binl_port\": \"<long>\",\n  \"tftp_port\": \"<long>\",\n  \"tftp_enabled\": \"<boolean>\",\n  \"dhcp_enabled\": \"<boolean>\",\n  \"binl_enabled\": \"<boolean>\",\n  \"prov_enabled\": \"<boolean>\",\n  \"address\": [\n   \"<uint8>\",\n   \"<uint8>\"\n  ],\n  \"stats\": [\n   {\n    \"name\": \"<string>\",\n    \"count\": \"<long>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"count\": \"<long>\"\n   }\n  ],\n  \"License\": {\n   \"Contact\": \"<string>\",\n   \"ContactEmail\": \"<string>\",\n   \"ContactId\": \"<string>\",\n   \"Endpoints\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"GenerationVersion\": \"<string>\",\n   \"Grantor\": \"<string>\",\n   \"GrantorEmail\": \"<string>\",\n   \"Licenses\": [\n    {\n     \"Active\": \"<boolean>\",\n     \"Data\": \"<object>\",\n     \"HardExpireDate\": \"<dateTime>\",\n     \"LongLicense\": \"<string>\",\n     \"Name\": \"<string>\",\n     \"PurchaseDate\": \"<dateTime>\",\n     \"ShortLicense\": \"<string>\",\n     \"SoftExpireDate\": \"<dateTime>\",\n     \"StartDate\": \"<dateTime>\",\n     \"Version\": \"<string>\"\n    },\n    {\n     \"Active\": \"<boolean>\",\n     \"Data\": \"<object>\",\n     \"HardExpireDate\": \"<dateTime>\",\n     \"LongLicense\": \"<string>\",\n     \"Name\": \"<string>\",\n     \"PurchaseDate\": \"<dateTime>\",\n     \"ShortLicense\": \"<string>\",\n     \"SoftExpireDate\": \"<dateTime>\",\n     \"StartDate\": \"<dateTime>\",\n     \"Version\": \"<string>\"\n    }\n   ],\n   \"Owner\": \"<string>\",\n   \"OwnerEmail\": \"<string>\",\n   \"OwnerId\": \"<string>\",\n   \"Version\": \"<string>\"\n  },\n  \"features\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"scopes\": \"<object>\"\n },\n \"Token\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name/token?ttl=<long>&roles=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"token"
											],
											"query": [
												{
													"key": "ttl",
													"value": "<long>"
												},
												{
													"key": "roles",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name/token?ttl=<long>&roles=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"token"
											],
											"query": [
												{
													"key": "ttl",
													"value": "<long>"
												},
												{
													"key": "roles",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:name/token?ttl=<long>&roles=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":name",
												"token"
											],
											"query": [
												{
													"key": "ttl",
													"value": "<long>"
												},
												{
													"key": "roles",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Users filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Users by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexes:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "UsersResponse returned on a successful GET of all the users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Name\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"PasswordHash\": [\n   \"<uint8>\",\n   \"<uint8>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Roles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Secret\": \"<string>\",\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Name\": \"<string>\",\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"PasswordHash\": [\n   \"<uint8>\",\n   \"<uint8>\"\n  ],\n  \"ReadOnly\": \"<boolean>\",\n  \"Roles\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Secret\": \"<string>\",\n  \"Validated\": \"<boolean>\"\n }\n]"
						}
					]
				},
				{
					"name": "Stats of the List Users filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred."
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"PasswordHash\": [\n        \"<uint8>\",\n        \"<uint8>\"\n    ],\n    \"Roles\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"Secret\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a User from the provided object"
					},
					"response": [
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Name\": \"<string>\",\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"PasswordHash\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"ReadOnly\": \"<boolean>\",\n \"Roles\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Secret\": \"<string>\",\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workflows",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "actions",
							"item": [
								{
									"name": "{cmd}",
									"item": [
										{
											"name": "List specific action for a workflow Workflow",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "List specific {cmd} action for a Workflow specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionResponse return on a successful GET of a single Action",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Command\": \"<string>\",\n \"Model\": \"<string>\",\n \"OptionalParams\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Provider\": \"<string>\",\n \"RequiredParams\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												}
											]
										},
										{
											"name": "Call an action on the node.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														":name",
														"actions",
														":cmd"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														},
														{
															"key": "cmd",
															"value": "<string>",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
											},
											"response": [
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ErrorResponse is returned whenever an error occurs",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
												},
												{
													"name": "ActionPostResponse return on a successful POST of action",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/workflows/:name/actions/:cmd?plugin=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																":name",
																"actions",
																":cmd"
															],
															"query": [
																{
																	"key": "plugin",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "name"
																},
																{
																	"key": "cmd"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<object>\""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List workflow actions Workflow",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name/actions?plugin=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name",
												"actions"
											],
											"query": [
												{
													"key": "plugin",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											]
										},
										"description": "List Workflow actions for a Workflow specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred"
									},
									"response": [
										{
											"name": "ErrorResponse is returned whenever an error occurs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/workflows/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
										},
										{
											"name": "ActionsResponse return on a successful GET of all Actions",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/workflows/:name/actions?plugin=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														":name",
														"actions"
													],
													"query": [
														{
															"key": "plugin",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"Command\": \"<string>\",\n  \"Model\": \"<string>\",\n  \"OptionalParams\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Provider\": \"<string>\",\n  \"RequiredParams\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete a Workflow",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Delete a Workflow specified by {name}"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "WorkflowResponse returned on a successful GET, PUT, PATCH, or POST of a single workflow",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Get a Workflow",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Get the Workflow specified by {name} or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "WorkflowResponse returned on a successful GET, PUT, PATCH, or POST of a single workflow",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "See if a Workflow exists",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Return 200 if the Workflow specifiec by {name} exists, or return NotFound."
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch a Workflow",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    },\n    {\n        \"from\": \"<string>\",\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<object>\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/workflows/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Workflow specified by {name} using a RFC6902 Patch structure"
							},
							"response": [
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "WorkflowResponse returned on a successful GET, PUT, PATCH, or POST of a single workflow",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Put a Workflow",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"Stages\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/workflows/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									]
								},
								"description": "Update a Workflow specified by {name} using a JSON Workflow"
							},
							"response": [
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "NoContentResponse is returned for deletes and auth errors",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "ErrorResponse is returned whenever an error occurs",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
								},
								{
									"name": "WorkflowResponse returned on a successful GET, PUT, PATCH, or POST of a single workflow",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workflows/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												":name"
											],
											"variable": [
												{
													"key": "name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lists Workflows filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Reboot",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								}
							]
						},
						"description": "This will show all Workflows by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "WorkflowsResponse returned on a successful GET of all the workflows",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Name\": \"<string>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Stages\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n },\n {\n  \"Available\": \"<boolean>\",\n  \"Bundle\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Documentation\": \"<string>\",\n  \"Endpoint\": \"<string>\",\n  \"Errors\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Name\": \"<string>\",\n  \"ReadOnly\": \"<boolean>\",\n  \"Stages\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"Validated\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Stats of the List Workflows filtered by some parameters.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "limit",
									"value": "<long>"
								},
								{
									"key": "Available",
									"value": "<string>"
								},
								{
									"key": "Valid",
									"value": "<string>"
								},
								{
									"key": "ReadOnly",
									"value": "<string>"
								},
								{
									"key": "Name",
									"value": "<string>"
								},
								{
									"key": "Reboot",
									"value": "<string>"
								},
								{
									"key": "BootEnv",
									"value": "<string>"
								}
							]
						},
						"description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)&Available=true - returns items with Name less than fred and Available is true"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows?offset=<long>&limit=<long>&Available=<string>&Valid=<string>&ReadOnly=<string>&Name=<string>&Reboot=<string>&BootEnv=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "limit",
											"value": "<long>"
										},
										{
											"key": "Available",
											"value": "<string>"
										},
										{
											"key": "Valid",
											"value": "<string>"
										},
										{
											"key": "ReadOnly",
											"value": "<string>"
										},
										{
											"key": "Name",
											"value": "<string>"
										},
										{
											"key": "Reboot",
											"value": "<string>"
										},
										{
											"key": "BootEnv",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a Workflow",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Description\": \"<string>\",\n    \"Documentation\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"Stages\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/workflows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows"
							]
						},
						"description": "Create a Workflow from the provided object"
					},
					"response": [
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "NoContentResponse is returned for deletes and auth errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "WorkflowResponse returned on a successful GET, PUT, PATCH, or POST of a single workflow",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Available\": \"<boolean>\",\n \"Bundle\": \"<string>\",\n \"Description\": \"<string>\",\n \"Documentation\": \"<string>\",\n \"Endpoint\": \"<string>\",\n \"Errors\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Name\": \"<string>\",\n \"ReadOnly\": \"<boolean>\",\n \"Stages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Validated\": \"<boolean>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						},
						{
							"name": "ErrorResponse is returned whenever an error occurs",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create an Event",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Action\": \"<string>\",\n    \"Key\": \"<string>\",\n    \"Object\": \"<object>\",\n    \"Original\": \"<object>\",\n    \"Principal\": \"<string>\",\n    \"Time\": \"<dateTime>\",\n    \"Type\": \"<string>\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					]
				},
				"description": "Create an Event from the provided object"
			},
			"response": [
				{
					"name": "ErrorResponse is returned whenever an error occurs",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Action\": \"<string>\",\n    \"Key\": \"<string>\",\n    \"Object\": \"<object>\",\n    \"Original\": \"<object>\",\n    \"Principal\": \"<string>\",\n    \"Time\": \"<dateTime>\",\n    \"Type\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Action\": \"<string>\",\n    \"Key\": \"<string>\",\n    \"Object\": \"<object>\",\n    \"Original\": \"<object>\",\n    \"Principal\": \"<string>\",\n    \"Time\": \"<dateTime>\",\n    \"Type\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Action\": \"<string>\",\n    \"Key\": \"<string>\",\n    \"Object\": \"<object>\",\n    \"Original\": \"<object>\",\n    \"Principal\": \"<string>\",\n    \"Time\": \"<dateTime>\",\n    \"Type\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Action\": \"<string>\",\n    \"Key\": \"<string>\",\n    \"Object\": \"<object>\",\n    \"Original\": \"<object>\",\n    \"Principal\": \"<string>\",\n    \"Time\": \"<dateTime>\",\n    \"Type\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "ErrorResponse is returned whenever an error occurs",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Action\": \"<string>\",\n    \"Key\": \"<string>\",\n    \"Object\": \"<object>\",\n    \"Original\": \"<object>\",\n    \"Principal\": \"<string>\",\n    \"Time\": \"<dateTime>\",\n    \"Type\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
					"code": 422,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Return current system info.",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": ""
					}
				],
				"url": {
					"raw": "{{baseUrl}}/info",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": [
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"info"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "ErrorResponse is returned whenever an error occurs",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"info"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
				},
				{
					"name": "InfosResponse returned on a successful GET of an info",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"info"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"arch\": \"<string>\",\n \"os\": \"<string>\",\n \"version\": \"<string>\",\n \"id\": \"<string>\",\n \"local_id\": \"<string>\",\n \"ha_id\": \"<string>\",\n \"api_port\": \"<long>\",\n \"file_port\": \"<long>\",\n \"dhcp_port\": \"<long>\",\n \"binl_port\": \"<long>\",\n \"tftp_port\": \"<long>\",\n \"tftp_enabled\": \"<boolean>\",\n \"dhcp_enabled\": \"<boolean>\",\n \"binl_enabled\": \"<boolean>\",\n \"prov_enabled\": \"<boolean>\",\n \"address\": [\n  \"<uint8>\",\n  \"<uint8>\"\n ],\n \"stats\": [\n  {\n   \"name\": \"<string>\",\n   \"count\": \"<long>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"count\": \"<long>\"\n  }\n ],\n \"License\": {\n  \"Contact\": \"<string>\",\n  \"ContactEmail\": \"<string>\",\n  \"ContactId\": \"<string>\",\n  \"Endpoints\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"GenerationVersion\": \"<string>\",\n  \"Grantor\": \"<string>\",\n  \"GrantorEmail\": \"<string>\",\n  \"Licenses\": [\n   {\n    \"Active\": \"<boolean>\",\n    \"Data\": \"<object>\",\n    \"HardExpireDate\": \"<dateTime>\",\n    \"LongLicense\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"PurchaseDate\": \"<dateTime>\",\n    \"ShortLicense\": \"<string>\",\n    \"SoftExpireDate\": \"<dateTime>\",\n    \"StartDate\": \"<dateTime>\",\n    \"Version\": \"<string>\"\n   },\n   {\n    \"Active\": \"<boolean>\",\n    \"Data\": \"<object>\",\n    \"HardExpireDate\": \"<dateTime>\",\n    \"LongLicense\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"PurchaseDate\": \"<dateTime>\",\n    \"ShortLicense\": \"<string>\",\n    \"SoftExpireDate\": \"<dateTime>\",\n    \"StartDate\": \"<dateTime>\",\n    \"Version\": \"<string>\"\n   }\n  ],\n  \"Owner\": \"<string>\",\n  \"OwnerEmail\": \"<string>\",\n  \"OwnerId\": \"<string>\",\n  \"Version\": \"<string>\"\n },\n \"features\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"scopes\": \"<object>\"\n}"
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"info"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "get Logs",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": ""
					}
				],
				"url": {
					"raw": "{{baseUrl}}/logs",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"logs"
					]
				},
				"description": "Return current contents of the log buffer"
			},
			"response": [
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "ErrorResponse is returned whenever an error occurs",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"Code\": \"<long>\",\n \"Key\": \"<string>\",\n \"Messages\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"Model\": \"<string>\",\n \"Type\": \"<string>\"\n}"
				},
				{
					"name": "LogResponse is returned in response to a log dump request.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"Data\": [\n   \"<object>\",\n   \"<object>\"\n  ],\n  \"File\": \"<string>\",\n  \"Group\": \"<long>\",\n  \"IgnorePublish\": \"<boolean>\",\n  \"Level\": \"<integer>\",\n  \"Line\": \"<long>\",\n  \"Message\": \"<string>\",\n  \"Principal\": \"<string>\",\n  \"Seq\": \"<long>\",\n  \"Service\": \"<string>\",\n  \"Time\": \"<dateTime>\"\n },\n {\n  \"Data\": [\n   \"<object>\",\n   \"<object>\"\n  ],\n  \"File\": \"<string>\",\n  \"Group\": \"<long>\",\n  \"IgnorePublish\": \"<boolean>\",\n  \"Level\": \"<integer>\",\n  \"Line\": \"<long>\",\n  \"Message\": \"<string>\",\n  \"Principal\": \"<string>\",\n  \"Seq\": \"<long>\",\n  \"Service\": \"<string>\",\n  \"Time\": \"<dateTime>\"\n }\n]"
				}
			]
		},
		{
			"name": "list Objects",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": ""
					}
				],
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				},
				"description": "Lists the object types in the system"
			},
			"response": [
				{
					"name": "ObjectsResponse returned on a successful GET of objects",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n \"<string>\",\n \"<string>\"\n]"
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "NoContentResponse is returned for deletes and auth errors",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c27352ce-e909-4811-8bf9-72b4a21ebee4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4bd6c125-7104-4026-a131-be086ea6f6d4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0b088f61-70cf-40e2-b794-959fc5250ee0",
			"key": "baseUrl",
			"value": "/api/v3",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
